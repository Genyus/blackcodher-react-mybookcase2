{"version":3,"sources":["components/Header.js","components/Book.js","components/BookList.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","to","Book","props","book","id","volumeInfo","title","authors","description","imageLinks","thumbnail","smallThumbnail","listPrice","saleInfo","src","alt","amount","onClick","addBook","defaultProps","BookList","books","map","key","About","App","useState","data","setBooks","newBookList","filter","console","log","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w/1EAkBeA,MAdf,WACI,OACI,kBAAC,IAAMC,SAAP,KACG,yBAAKC,UAAU,UACd,gDACA,kBAAC,IAAD,CAAMC,GAAG,iCAAiCD,UAAU,YAApD,QACA,kBAAC,IAAD,CAAMC,GAAG,6CAA6CD,UAAU,YAAhE,SACA,kBAAC,IAAD,CAAMC,GAAG,0CAA0CD,UAAU,YAA7D,YACA,gCCNNE,G,MAAO,SAACC,GAAW,IAAD,EAIdA,EAAMC,KAFPC,EAFe,EAEfA,GAFe,IAEXC,WAAaC,EAFF,EAEEA,MAAOC,EAFT,EAESA,QAASC,EAFlB,EAEkBA,YAFlB,IAE+BC,WAAYC,EAF3C,EAE2CA,UAAWC,EAFtD,EAEsDA,eAC5DC,EAHM,EAGhBC,SAAUD,UAyBd,OACI,yBAAKb,UAAU,QACX,4BAAKO,GACL,kCAAQC,GACR,yBAAKO,IAAMJ,GAAaC,EAAgBI,IAAKT,IAC7C,2BAAIM,GAAaA,EAAUI,QAC3B,2BAAIR,GACJ,4BAAQS,QAAS,kBAAMf,EAAMgB,QAAQZ,EAAOF,KAA5C,YAiBTH,EAAKkB,aAAc,CACfZ,QAAS,oBAIDN,QC9CAmB,EAXE,SAAClB,GAChB,OACE,6BACKA,EAAMmB,MAAMC,KAAI,SAAAnB,GAAI,OACxB,kBAAC,EAAD,CAAMoB,IAAKpB,EAAKC,GAAID,KAAMA,EAAMe,QAAShB,EAAMgB,e,cCYrCM,MAlBf,WACI,OACI,kBAAC,IAAM1B,SAAP,KACI,yBAAKC,UAAU,WACnB,yBAAKA,UAAU,aACb,uDACA,2EACA,wIACE,2IACJ,kBAAC,IAAD,CAAMC,GAAG,iCAAiCD,UAAU,eAChD,4BAAQA,UAAU,eAAlB,yBCiDG0B,EAtDH,SAACvB,GAAW,IAAD,EACKwB,mBAASC,GADd,mBACdN,EADc,KACPO,EADO,KAGrB,SAASV,EAASZ,EAAOF,GACvB,IAAMyB,EAAcR,EAAMS,QAAO,SAAA3B,GAAI,OAAIA,EAAKC,KAAOA,KACrDwB,EAASC,GACXE,QAAQC,IAAR,mBAAwB1B,EAAxB,2BAAgDF,EAAhD,kBAEA,OACE,oCACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,iCAAiCC,OAAS,kBAC1D,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUuB,MAAOA,EAAOH,QAASA,QAG/B,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,6CAA6CC,OAAS,kBAC5E,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UAGE,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,0CAA0CC,OAAS,kBACzE,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,aCtBUsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.24a598bc.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport \"./header.css\"\n\nfunction Header() {\n    return(\n        <React.Fragment>\n           <div className=\"header\">\n            <h1>My Test Bookcase</h1>\n            <Link to='/blackcodher-react-mybookcase2' className=\"bookLink\">Home</Link>\n            <Link to=\"/blackcodher-react-mybookcase2/pages/About\" className=\"bookLink\">About</Link>\n            <Link to=\"/blackcodher-react-mybookcase2/bookcase\" className=\"bookLink\">Bookcase</Link>\n            <br></br>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Header","import React from 'react';\nimport '../components/book.css'\nimport PropTypes from 'prop-types'\n// import addBook from '../App'\n// import Book from '../models/books.json'\n\nconst Book = (props) => {\n\n    let {id, volumeInfo: {title, authors, description, imageLinks:{thumbnail, smallThumbnail}},\n        saleInfo:{listPrice}} \n        = props.book;\n   \n\n        // let amount = () => {\n        //     if (saleInfo.retailPrice) {\n        //         let amount = saleInfo.retailPrice.amount;\n        //         return amount\n        //     }else {\n        //         let amount = 'No Amount Set'; \n        //         return amount\n        //     }\n        // };\n \n        // let url = () => {\n        // if (imageLinks) {\n        //     let url = imageLinks.smallThumbnail;\n        //     return url;\n        // } else {\n        //     let url = 'image not available';\n        //     return url;\n        // }\n        // };\n        \n\n    return (\n        <div className='book'>\n            <h2>{title}</h2>\n            <h3>by {authors}</h3>\n            <img src= {thumbnail || smallThumbnail} alt={title}/>\n            <p>{listPrice && listPrice.amount}</p>\n            <p>{description}</p>\n            <button onClick={() => props.addBook(title, id)}>Add +</button>\n        </div>\n    );\n}\n\nBook.propTypes = {\n    volumeInfo: PropTypes.shape(\n        {title: PropTypes.string.isRequired,\n        authors: PropTypes.array,\n        description: PropTypes.string,\n        imageLinks: PropTypes.shape(\n            {thumbnail: PropTypes.string, \n            smallThumbnail: PropTypes.string})\n        }),\n        saleInfo: PropTypes.shape({listPrice: PropTypes.shape({amount: PropTypes.number})})\n   };\n\n   Book.defaultProps ={\n       authors: \"No Known Authors\"\n   }\n   \n\nexport default Book;","import React from 'react';\nimport Book from './Book';\n// import data from './models/books.json';\n// import logo from './logo.svg';\n// import './App.css';\n\nconst BookList = (props) => {\n  return (\n    <div>\n        {props.books.map(book => (\n     <Book key={book.id} book={book} addBook={props.addBook}/>\n        ))}\n    </div>\n  );\n}\n\n\nexport default BookList;","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport '../pages/about.css'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <div className=\"aboutUs\">\n        <div className=\"hero-text\">\n          <h1>Welcome to the Bookcase</h1>\n          <h3>This application was made by Charlene Grant</h3>\n          <p>The app displays a list of books to the user and allows them to save their favourites to a local bookcase</p>\n            <p>Click on the Add button to save a book to your bookcase. You can also search by name, author and description</p>\n        <Link to=\"/blackcodher-react-mybookcase2\" className=\"aboutButton\">\n            <button className=\"aboutButton\">Look For A Book!</button>\n        </Link>\n      </div>\n      </div>\n        </React.Fragment>\n    )\n}\n\nexport default About","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport BookList from './components/BookList';\nimport data from './models/books.json';\nimport About from './pages/About'\n// import logo from './logo.svg';\n// import './App.css';\n\nconst App = (props) => {\n  const [books, setBooks] = useState(data);\n  \n  function addBook (title, id) {\n    const newBookList = books.filter(book => book.id !== id);\n    setBooks(newBookList)\n  console.log(`The Book ${title} with the id of ${id} was clicked.`);\n }\n  return (\n    <>\n    <Router>\n      <Route exact path=\"/blackcodher-react-mybookcase2\" render= {() => (\n        <React.Fragment>\n          <Header />\n          <BookList books={books} addBook={addBook} />\n        </React.Fragment>\n      )} />\n            <Route exact path=\"/blackcodher-react-mybookcase2/pages/About\" render= {() => (\n        <React.Fragment>\n          <Header /> \n          <About />\n        </React.Fragment>\n      )} />\n            <Route exact path=\"/blackcodher-react-mybookcase2/bookcase\" render= {() => (\n        <React.Fragment>\n          <Header />\n        </React.Fragment>\n      )} />\n    </Router>\n    </>\n  )\n }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}